name: Build

on:
  pull_request:
    branches:
      - main
      - beta
  push:
    branches:
      - main
      - beta
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  image:
    name: Image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board:
          - nanopi-r5s
          - uefi-x86
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Fetch armbian version
        id: armbian
        run: echo "version=$(git submodule status third_party/armbian-build/ | cut -d ' ' -f 2)" >>"$GITHUB_OUTPUT"

      - name: Cache armbian build
        uses: actions/cache@v3
        with:
          path: third_party/armbian-build/cache
          key: image-${{ matrix.board }}-${{ steps.armbian.outputs.version }}
          restore-keys: |
            image-${{ matrix.board }}-
            image-

      - name: Install build dependencies
        run: sudo apt-get install -y --no-install-recommends build-essential

      - name: Fetch version from git history
        uses: codfish/semantic-release-action@v3
        id: semantic
        with:
          dry-run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build firmware image
        run: VERSION=v${{ steps.semantic.outputs.release-version }} BOARD=${{ matrix.board }} make build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.board }}
          path: |
            output/*.gz
            output/*.sha256

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref_protected == true && github.event_name == 'push'
    needs: [image]
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: release

      - name: Create release
        uses: codfish/semantic-release-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
